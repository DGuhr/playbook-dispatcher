# Copied from insights-ingress-go
# This podman compose file stands up local dependencies for
# Kafka, Zookeeper, Minio and insights-ingress-go.
# Please consult its README.md for bucket creation steps
version: "3"
services:
  spicedb:
    image: "authzed/spicedb"
    volumes:
      - "./authz_external/spicedb_bootstrap.yaml:/mnt/spicedb_bootstrap.yaml"
    command: "serve"
    restart: "always"
    ports:
      - "8081:8081"
      - "9090:9090"
      - "50051:50051"
    environment:
      - "SPICEDB_DATASTORE_BOOTSTRAP_FILES=/mnt/spicedb_bootstrap.yaml"
      - "SPICEDB_DATASTORE_BOOTSTRAP_OVERWRITE=true"
      - "SPICEDB_GRPC_PRESHARED_KEY=foobar"
      - "SPICEDB_DATASTORE_ENGINE=postgres"
      - "SPICEDB_DATASTORE_CONN_URI=postgres://postgres:secret@database:5433/spicedb?sslmode=disable"
    depends_on:
      - "migrate"

  migrate:
    image: "authzed/spicedb"
    command: "migrate head"
    restart: "on-failure"
    environment:
      - "SPICEDB_DATASTORE_ENGINE=postgres"
      - "SPICEDB_DATASTORE_CONN_URI=postgres://postgres:secret@database:5433/spicedb?sslmode=disable"
    depends_on:
      - "database"

  event_handler:
    build:
      context: ./authz_external/event_handler
    environment:
      - KAFKA_URL=kafka:29092
      - KAFKA_TOPIC=platform.playbook-dispatcher.runs
      - SPICEDB_URL=spicedb:50051
      - SPICEDB_PSK=foobar
    links:
      - spicedb
      - kafka
    depends_on:
      - kafka
    restart: "always"

  database:
    image: "postgres"
    ports:
      - "5433:5433"
    expose:
      - "5433" # Publishes 5433 to other containers but NOT to host machine
    environment:
      - "POSTGRES_PASSWORD=secret"
      - "POSTGRES_DB=spicedb"
    command: -p 5433

  dispatcher:
    image: quay.io/cloudservices/playbook-dispatcher
    build:
      context: .
    links:
    - kafka
    - db
    - spicedb
    ports:
      - '8000:8000'
      - '9001:9001'
    entrypoint:
      - /bin/sh
      - -c
      - '/app migrate up && /app run'
    environment:
      CLOWDER_ENABLED: "false"
      DB_HOST: "db"
      PSK_AUTH_TEST: "xwKhCUzgJ8"
      PSK_AUTH_REMEDIATIONS: "remediations"
      SPICEDB_ENABLED: "true"
      SPICEDB_URL: "spicedb:50051"
      SPICEDB_PSK: "foobar"
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=32181
      - ZOOKEEPER_SERVER_ID=1

  kafka:
    image: confluentinc/cp-kafka
    ports:
      - '29092:29092'
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:32181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true

  minio:
    image: minio/minio
    command: server /data --console-address ":10000"
    volumes:
      # These vars are defined in .env
      # These are configurable
      # Ensure the directories exist prior to running this file
      - minio_conf:/root/.minio:Z
      - minio_data:/data:Z
    ports:
      - '9000:9000'
      - '10000:10000'
    environment:
      - MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY
      - MINIO_SECRET_KEY=$MINIO_SECRET_KEY

  minio-createbuckets:
    image: minio/mc
    depends_on:
      - minio
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY" || exit 1;
      /usr/bin/mc mb --ignore-existing myminio/insights-upload-perma;
      /usr/bin/mc policy set upload myminio/insights-upload-perma;
      "

  ingress:
    image: quay.io/cloudservices/insights-ingress:latest
    ports:
      - '8080:3000'
    environment:
      - INGRESS_STAGEBUCKET=insights-upload-perma
      - INGRESS_VALIDTOPICS=playbook,playbook-sat
      - OPENSHIFT_BUILD_COMMIT=somestring
      - INGRESS_MAXSIZE=104857600
      - INGRESS_MINIODEV=true
      - INGRESS_MINIOACCESSKEY=$MINIO_ACCESS_KEY
      - INGRESS_MINIOSECRETKEY=$MINIO_SECRET_KEY
      - INGRESS_MINIOENDPOINT=minio:9000
    depends_on:
      - kafka

  db:
    image: quay.io/debezium/postgres:12
    restart: always
    environment:
      POSTGRES_PASSWORD: insights
      POSTGRES_USER: insights
      POSTGRES_DB: insights
    ports:
      - "5432:5432"

  connect:
    build:
      context: .
      dockerfile: event-streams/Dockerfile
    image: quay.io/cloudservices/playbook-dispatcher-connect
    links:
      - kafka
      - db
    ports:
      - 8083:8083
    environment:
      KAFKA_CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONNECT_CONFIGURATION: |
        group.id=playbook-dispatcher-connect
        key.converter=org.apache.kafka.connect.json.JsonConverter
        value.converter=org.apache.kafka.connect.json.JsonConverter
        offset.storage.topic=playbook-dispatcher-connect-config
        offset.storage.replication.factor=1
        offset.storage.partitions=1
        status.storage.topic=playbook-dispatcher-connect-status
        status.storage.replication.factor=1
        status.storage.partitions=1
        config.storage.topic=playbook-dispatcher-connect-offsets
        config.storage.replication.factor=1
        config.storage.partitions=1
        config.providers: file
        config.providers.file.class: com.redhat.insights.kafka.config.providers.PlainFileConfigProvider
      KAFKA_CONNECT_METRICS_ENABLED: "false"
      STRIMZI_KAFKA_GC_LOG_ENABLED: "false"
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"
    command: /opt/kafka/kafka_connect_run.sh

  connect-start:
    image: quay.io/cloudservices/playbook-dispatcher-connect
    links:
      - connect
    command: "curl -f -i -H 'Content-Type:application/json' -X POST connect:8083/connectors/ -d @/connector-local.json"
    restart: on-failure


volumes:
  minio_conf: {}
  minio_data: {}
